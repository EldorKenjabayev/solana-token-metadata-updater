const { Connection, Keypair, PublicKey, Transaction } = require('@solana/web3.js');
const { 
    createCreateMetadataAccountV3Instruction,
    PROGRAM_ID 
} = require('@metaplex-foundation/mpl-token-metadata');
const fs = require('fs');
require('dotenv').config();

async function setMetadata() {
    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞...\n');
        
        // Connect to network from .env
        const network = process.env.SOLANA_NETWORK === 'mainnet-beta' 
            ? 'https://api.mainnet-beta.solana.com' 
            : 'https://api.devnet.solana.com';
        
        const connection = new Connection(network, 'confirmed');
        const walletData = JSON.parse(fs.readFileSync(process.env.WALLET_PATH, 'utf8'));
        const wallet = Keypair.fromSecretKey(new Uint8Array(walletData));
        
        console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ—à–µ–ª–µ–∫: ${wallet.publicKey.toString()}`);
        console.log(`üì° –°–µ—Ç—å: ${process.env.SOLANA_NETWORK}`);
        
        const mintAddress = new PublicKey(process.env.TOKEN_MINT_ADDRESS);

        const tokenMetadata = {
            name: process.env.TOKEN_NAME,
            symbol: process.env.TOKEN_SYMBOL,
            uri: process.env.TOKEN_URI,
            sellerFeeBasisPoints: 0,
            creators: [
                {
                    address: wallet.publicKey,
                    verified: true,
                    share: 100,
                }
            ],
            collection: null,
            uses: null,
        };

        console.log('\n1. –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–∫–µ–Ω–∞...');
        console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${tokenMetadata.name}`);
        console.log(`–°–∏–º–≤–æ–ª: ${tokenMetadata.symbol}`);
        const [metadataAddress] = PublicKey.findProgramAddressSync(
            [
                Buffer.from('metadata'),
                PROGRAM_ID.toBuffer(),
                mintAddress.toBuffer(),
            ],
            PROGRAM_ID
        );

        console.log(`\n2. –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: ${metadataAddress.toString()}`);
        const instruction = createCreateMetadataAccountV3Instruction(
            {
                metadata: metadataAddress,
                mint: mintAddress,
                mintAuthority: wallet.publicKey,
                payer: wallet.publicKey,
                updateAuthority: wallet.publicKey,
            },
            {
                createMetadataAccountArgsV3: {
                    data: tokenMetadata,
                    isMutable: true,
                    collectionDetails: null,
                },
            }
        );
        const transaction = new Transaction().add(instruction);
        const signature = await connection.sendTransaction(transaction, [wallet]);
        
        console.log(`\n3. ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${signature}`);
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
        
        await connection.confirmTransaction(signature);
        
        console.log('\nüéâ –£–°–ü–ï–•! –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!');
        console.log(`üîó –¢–æ–∫–µ–Ω: ${mintAddress.toString()}`);
        console.log(`üìù –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${metadataAddress.toString()}`);
        console.log(`üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Explorer: https://explorer.solana.com/address/${mintAddress.toString()}?cluster=devnet`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        console.error('üí° –î–µ—Ç–∞–ª–∏:', error.message);
        if (error.message.includes('already exists')) {
            console.error('\nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.');
            console.error('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö.');
        }
    }
}

setMetadata();
