#!/usr/bin/env node

const { createUmi } = require('@metaplex-foundation/umi-bundle-defaults');
const { fromWeb3JsKeypair } = require('@metaplex-foundation/umi-web3js-adapters');
const { clusterApiUrl, Keypair, LAMPORTS_PER_SOL } = require('@solana/web3.js');
const fs = require('fs');
require('dotenv').config();

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Solana Metadata Tool');
console.log('==============================================\n');

const network = process.env.SOLANA_NETWORK || 'devnet';
const walletPath = process.env.WALLET_PATH || './wallets/keypair.json';

async function testSolanaConnection() {
    console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana...');
    
    try {
        const rpcUrl = process.env.RPC_URL || clusterApiUrl(network);
        console.log(`   üîó RPC URL: ${rpcUrl}`);
        console.log(`   üì° –°–µ—Ç—å: ${network}`);
        
        const umi = createUmi(rpcUrl);
        
        // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const slot = await umi.rpc.getSlot();
        console.log(`   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (—Å–ª–æ—Ç: ${slot})`);
        
        return umi;
        
    } catch (error) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana');
        console.log(`   üí° ${error.message}`);
        return null;
    }
}

async function testWallet(umi) {
    console.log('\nüíº –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞...');
    
    try {
        if (!fs.existsSync(walletPath)) {
            throw new Error(`–§–∞–π–ª –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${walletPath}`);
        }
        
        const walletData = JSON.parse(fs.readFileSync(walletPath, 'utf8'));
        const keypair = Keypair.fromSecretKey(new Uint8Array(walletData));
        const signer = fromWeb3JsKeypair(keypair);
        
        const publicKey = signer.publicKey.toString();
        console.log(`   üìç –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${publicKey}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        const balance = await umi.rpc.getBalance(signer.publicKey);
        const solBalance = Number(balance.basisPoints) / LAMPORTS_PER_SOL;
        
        console.log(`   üí∞ –ë–∞–ª–∞–Ω—Å: ${solBalance.toFixed(6)} SOL`);
        
        if (solBalance === 0) {
            console.log('   ‚ö†Ô∏è  –ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å');
            if (network === 'devnet') {
                console.log('   üí° –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã: solana airdrop 1 --url devnet');
            }
        } else {
            console.log('   ‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π');
        }
        
        return { signer, balance: solBalance };
        
    } catch (error) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞');
        console.log(`   üí° ${error.message}`);
        return null;
    }
}

async function runFullTest() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n');
    
    // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana
    const umi = await testSolanaConnection();
    if (!umi) {
        console.log('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana');
        process.exit(1);
    }
    
    // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    const walletResult = await testWallet(umi);
    if (!walletResult) {
        console.log('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ—à–µ–ª—å–∫–æ–º');
        process.exit(1);
    }
    
    console.log('\nüéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö');
    console.log('\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   npm start - –∑–∞–ø—É—Å–∫ –Ω–∞ devnet');
    console.log('   npm run mainnet - –∑–∞–ø—É—Å–∫ –Ω–∞ mainnet');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    runFullTest().catch(error => {
        console.error('\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    });
}