#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
require('dotenv').config();

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Solana Metadata Tool');
console.log('===============================================\n');

let hasErrors = false;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –≤–µ—Ä—Å–∏–∏
function checkNodeVersion() {
    const nodeVersion = process.version;
    const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
    
    console.log('üì¶ –í–µ—Ä—Å–∏—è Node.js:');
    console.log(`   –¢–µ–∫—É—â–∞—è: ${nodeVersion}`);
    
    if (majorVersion >= 18) {
        console.log('   ‚úÖ –í–µ—Ä—Å–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n');
    } else {
        console.log('   ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Node.js 18.x –∏–ª–∏ –≤—ã—à–µ\n');
        hasErrors = true;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function checkDependencies() {
    console.log('üìö –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:');
    
    try {
        const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        const dependencies = Object.keys(packageJson.dependencies || {});
        
        let missingDeps = [];
        
        dependencies.forEach(dep => {
            try {
                require.resolve(dep);
                console.log(`   ‚úÖ ${dep}`);
            } catch (error) {
                console.log(`   ‚ùå ${dep} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
                missingDeps.push(dep);
                hasErrors = true;
            }
        });
        
        if (missingDeps.length === 0) {
            console.log('   üéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n');
        } else {
            console.log(`\n   üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm install\n`);
        }
        
    } catch (error) {
        console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å package.json\n');
        hasErrors = true;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
function checkWallet() {
    console.log('üíº –ö–æ—à–µ–ª–µ–∫:');
    
    const walletPath = process.env.WALLET_PATH || './wallets/keypair.json';
    
    if (fs.existsSync(walletPath)) {
        try {
            const walletData = JSON.parse(fs.readFileSync(walletPath, 'utf8'));
            
            if (Array.isArray(walletData) && walletData.length === 64) {
                console.log('   ‚úÖ –ö–æ—à–µ–ª–µ–∫ –Ω–∞–π–¥–µ–Ω –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
                console.log(`   üìç –§–∞–π–ª: ${walletPath}`);
            } else {
                console.log('   ‚ùå –ö–æ—à–µ–ª–µ–∫ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
                console.log('   üí° –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑ 64 —á–∏—Å–µ–ª');
                hasErrors = true;
            }
        } catch (error) {
            console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∫–æ—à–µ–ª—å–∫–∞');
            console.log(`   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ JSON —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ ${walletPath}`);
            hasErrors = true;
        }
    } else {
        console.log(`   ‚ùå –§–∞–π–ª –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${walletPath}`);
        console.log('   üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –≤ .env');
        hasErrors = true;
    }
    
    console.log('');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
function checkTokenConfig() {
    console.log('üéØ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞:');
    
    try {
        const config = require('../src/config.js');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (config.mintAddress) {
            console.log(`   ‚úÖ –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: ${config.mintAddress}`);
            
            if (config.mintAddress.length !== 44) {
                console.log('   ‚ö†Ô∏è  –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–º (–Ω–µ 44 —Å–∏–º–≤–æ–ª–∞)');
            }
        } else {
            console.log('   ‚ùå –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
            hasErrors = true;
        }
        
        if (config.metadata?.name) {
            console.log(`   ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${config.metadata.name}`);
        } else {
            console.log('   ‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ');
            hasErrors = true;
        }
        
        if (config.metadata?.symbol) {
            console.log(`   ‚úÖ –°–∏–º–≤–æ–ª: ${config.metadata.symbol}`);
        } else {
            console.log('   ‚ùå –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
            hasErrors = true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (config.metadata?.imagePath) {
            const imagePath = path.resolve(config.metadata.imagePath);
            
            if (fs.existsSync(imagePath)) {
                const stats = fs.statSync(imagePath);
                const sizeKB = (stats.size / 1024).toFixed(1);
                
                console.log(`   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${config.metadata.imagePath} (${sizeKB} KB)`);
            } else {
                console.log(`   ‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: ${config.metadata.imagePath}`);
                hasErrors = true;
            }
        } else {
            console.log('   ‚ùå –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–µ —É–∫–∞–∑–∞–Ω');
            hasErrors = true;
        }
        
    } catch (error) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        console.log(`   üí° ${error.message}`);
        hasErrors = true;
    }
    
    console.log('');
}

// –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
function showSummary() {
    console.log('üìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:');
    console.log('==================');
    
    if (hasErrors) {
        console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏');
        console.log('üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∫—Ä–∏–ø—Ç–∞\n');
        process.exit(1);
    } else {
        console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        console.log('üöÄ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç: npm start\n');
    }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
function runAllChecks() {
    checkNodeVersion();
    checkDependencies();
    checkWallet();
    checkTokenConfig();
    showSummary();
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if (require.main === module) {
    runAllChecks();
}