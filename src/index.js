#!/usr/bin/env node

const { createUmi } = require('@metaplex-foundation/umi-bundle-defaults');
const { createGenericFile, signerIdentity, transactionBuilder } = require('@metaplex-foundation/umi');
const { irysUploader } = require('@metaplex-foundation/umi-uploader-irys');
const { mplTokenMetadata, createMetadataAccountV3 } = require('@metaplex-foundation/mpl-token-metadata');
const { fromWeb3JsKeypair } = require('@metaplex-foundation/umi-web3js-adapters');
const { clusterApiUrl, Keypair } = require('@solana/web3.js');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const config = require('./config');

class SolanaMetadataCreator {
    constructor() {
        this.umi = null;
        this.signer = null;
        this.network = process.env.SOLANA_NETWORK || 'devnet';
        this.walletPath = process.env.WALLET_PATH || './wallets/keypair.json';
        this.results = {};
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    async initialize() {
        console.log('üöÄ Solana Token Metadata Creator');
        console.log('================================\n');

        // –í—ã–≤–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
        console.log(`   –°–µ—Ç—å: ${this.network}`);
        console.log(`   –¢–æ–∫–µ–Ω: ${config.mintAddress}`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${config.metadata.name} (${config.metadata.symbol})\n`);

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana
        await this.setupConnection();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
        await this.loadWallet();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–∞–≤
        await this.validateWallet();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana
    async setupConnection() {
        try {
            const rpcUrl = process.env.RPC_URL || clusterApiUrl(this.network);
            
            this.umi = createUmi(rpcUrl);
            this.umi.use(mplTokenMetadata());
            this.umi.use(irysUploader({
                address: this.network === 'mainnet' ? 'https://node1.irys.xyz' : 'https://devnet.irys.xyz'
            }));

            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana:', error.message);
            process.exit(1);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
    async loadWallet() {
        console.log('\nüîë –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞...');
        
        try {
            if (!fs.existsSync(this.walletPath)) {
                throw new Error(`–§–∞–π–ª –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${this.walletPath}`);
            }

            const walletData = JSON.parse(fs.readFileSync(this.walletPath, 'utf8'));
            const keypair = Keypair.fromSecretKey(new Uint8Array(walletData));
            
            this.signer = fromWeb3JsKeypair(keypair);
            this.umi.use(signerIdentity(this.signer));

            const publicKey = this.signer.publicKey.toString();
            console.log(`   ‚úÖ –ö–æ—à–µ–ª–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: ${publicKey.slice(0, 5)}...${publicKey.slice(-5)}`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞:', error.message);
            console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª keypair.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
            process.exit(1);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–∞–≤
    async validateWallet() {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ SOL
            const balance = await this.umi.rpc.getBalance(this.signer.publicKey);
            const solBalance = Number(balance.basisPoints) / 1000000000;
            
            console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å SOL: ${solBalance.toFixed(4)} SOL`);
            
            if (solBalance < 0.01) {
                console.warn('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å SOL. –ú–æ–∂–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∏—Ç—å –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            const mintAccount = await this.umi.rpc.getAccount(config.mintAddress);
            if (!mintAccount.exists) {
                throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ');
            }

            console.log('   ‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ');
            console.log('   ‚úÖ –ü—Ä–∞–≤–∞ authority –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—à–µ–ª—å–∫–∞:', error.message);
            process.exit(1);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ IPFS
    async uploadImage() {
        console.log('\nüñºÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ IPFS...');
        
        try {
            const imagePath = path.resolve(config.metadata.imagePath);
            
            if (!fs.existsSync(imagePath)) {
                throw new Error(`–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: ${imagePath}`);
            }

            const imageBuffer = fs.readFileSync(imagePath);
            const fileSize = (imageBuffer.length / 1024).toFixed(1);
            const fileName = path.basename(imagePath);
            
            console.log(`   üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º: ${fileName} (${fileSize} KB)`);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if (imageBuffer.length > config.upload.imageMaxSize) {
                throw new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${fileSize} KB. –ú–∞–∫—Å–∏–º—É–º: ${config.upload.imageMaxSize / 1024} KB`);
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ generic file –¥–ª—è Umi
            const imageFile = createGenericFile(imageBuffer, fileName, {
                contentType: this.getContentType(fileName)
            });

            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            let imageUri;
            for (let attempt = 1; attempt <= config.upload.retryAttempts; attempt++) {
                try {
                    console.log(`   ‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${attempt}/${config.upload.retryAttempts}...`);
                    
                    const [uri] = await this.umi.uploader.upload([imageFile]);
                    imageUri = uri;
                    break;
                } catch (error) {
                    if (attempt === config.upload.retryAttempts) {
                        throw error;
                    }
                    console.log(`   ‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º...`);
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }
            }

            console.log(`   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${imageUri}`);
            this.results.imageUri = imageUri;
            return imageUri;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.message);
            process.exit(1);
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ JSON –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    async uploadMetadata(imageUri) {
        console.log('\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ JSON –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            const metadata = {
                name: config.metadata.name,
                symbol: config.metadata.symbol,
                description: config.metadata.description,
                image: imageUri,
                ...(config.metadata.external_url && { external_url: config.metadata.external_url }),
                attributes: [
                    {
                        trait_type: "Type",
                        value: "SPL Token"
                    },
                    {
                        trait_type: "Network",
                        value: "Solana"
                    },
                    {
                        trait_type: "Standard",
                        value: "Metaplex"
                    }
                ],
                properties: {
                    category: "ft", // fungible token
                    creators: [
                        {
                            address: this.signer.publicKey.toString(),
                            verified: true,
                            share: 100
                        }
                    ]
                }
            };

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            const metadataFile = createGenericFile(
                JSON.stringify(metadata, null, 2),
                'metadata.json',
                { contentType: 'application/json' }
            );

            // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            console.log('   üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ IPFS...');
            const [metadataUri] = await this.umi.uploader.upload([metadataFile]);
            
            console.log(`   ‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${metadataUri}`);
            this.results.metadataUri = metadataUri;
            this.results.metadata = metadata;
            
            return metadataUri;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error.message);
            process.exit(1);
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ Metadata Account –≤ –±–ª–æ–∫—á–µ–π–Ω–µ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
    async createMetadataAccount(metadataUri) {
        console.log('\nüîó –°–æ–∑–¥–∞–Ω–∏–µ Metadata Account...');
        
        try {
            console.log('   üìù –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');

            // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            const createMetadataInstruction = createMetadataAccountV3(this.umi, {
                mint: config.mintAddress,
                mintAuthority: this.signer,
                updateAuthority: this.signer,
                data: {
                    name: config.metadata.name,
                    symbol: config.metadata.symbol,
                    uri: metadataUri,
                    sellerFeeBasisPoints: 0,
                    creators: [
                        {
                            address: this.signer.publicKey,
                            verified: true,
                            percentageShare: 100
                        }
                    ],
                    collection: null,
                    uses: null
                },
                isMutable: true,
                collectionDetails: null
            });

            // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const transaction = transactionBuilder()
                .add(createMetadataInstruction);

            const result = await transaction.sendAndConfirm(this.umi);
            const signature = result.signature;
            
            console.log(`   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${signature.slice(0, 5)}...${signature.slice(-4)}`);
            console.log('   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            this.results.signature = signature;
            this.results.transactionUrl = `https://explorer.solana.com/tx/${signature}?cluster=${this.network}`;
            
            console.log('   ‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç–æ–∫–µ–Ω—É!');
            
            return signature;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Metadata Account:', error.message);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if (error.message.includes('already exists')) {
                console.error('üí° –¢–æ–∫–µ–Ω —É–∂–µ –∏–º–µ–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.');
            } else if (error.message.includes('insufficient funds')) {
                console.error('üí° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫.');
            } else if (error.message.includes('authority')) {
                console.error('üí° –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ mint authority –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.');
            }
            
            process.exit(1);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ Content-Type –¥–ª—è —Ñ–∞–π–ª–∞
    getContentType(fileName) {
        const ext = path.extname(fileName).toLowerCase();
        const contentTypes = {
            '.png': 'image/png',
            '.jpg': 'image/jpeg',
            '.jpeg': 'image/jpeg',
            '.gif': 'image/gif',
            '.svg': 'image/svg+xml',
            '.webp': 'image/webp'
        };
        return contentTypes[ext] || 'application/octet-stream';
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    async saveResults() {
        const results = {
            success: true,
            timestamp: new Date().toISOString(),
            network: this.network,
            mintAddress: config.mintAddress,
            walletAddress: this.signer.publicKey.toString(),
            imageUri: this.results.imageUri,
            metadataUri: this.results.metadataUri,
            signature: this.results.signature,
            explorerUrl: `https://explorer.solana.com/address/${config.mintAddress}?cluster=${this.network}`,
            transactionUrl: this.results.transactionUrl,
            metadata: this.results.metadata
        };

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        fs.writeFileSync('results.json', JSON.stringify(results, null, 2));
        
        return results;
    }

    // –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    displayResults(results) {
        console.log('\nüéâ –ì–æ—Ç–æ–≤–æ!');
        console.log('==========');
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
        console.log(`   –¢–æ–∫–µ–Ω: ${results.mintAddress}`);
        console.log(`   –ö–æ—à–µ–ª–µ–∫: ${results.walletAddress.slice(0, 5)}...${results.walletAddress.slice(-5)}`);
        console.log(`   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${results.imageUri}`);
        console.log(`   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${results.metadataUri}`);
        console.log('\nüîó –°—Å—ã–ª–∫–∏:');
        console.log(`   Explorer: ${results.explorerUrl}`);
        console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${results.transactionUrl}`);
        console.log('\nüí° –í–∞—à —Ç–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö!');
        console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª results.json');
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    async run() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await this.initialize();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageUri = await this.uploadImage();
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            const metadataUri = await this.uploadMetadata(imageUri);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ Metadata Account
            await this.createMetadataAccount(metadataUri);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            const results = await this.saveResults();
            this.displayResults(results);
            
        } catch (error) {
            console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
            const errorResult = {
                success: false,
                timestamp: new Date().toISOString(),
                error: error.message,
                stack: error.stack
            };
            
            fs.writeFileSync('error.json', JSON.stringify(errorResult, null, 2));
            console.log('üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ error.json');
            
            process.exit(1);
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    const creator = new SolanaMetadataCreator();
    creator.run();
}

module.exports = SolanaMetadataCreator;