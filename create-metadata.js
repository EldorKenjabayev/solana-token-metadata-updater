const { Connection, Keypair, PublicKey, Transaction } = require('@solana/web3.js');
const { createCreateMetadataAccountV3Instruction } = require('@metaplex-foundation/mpl-token-metadata');
const fs = require('fs');

async function createMetadata() {
    try {
        console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è SPL —Ç–æ–∫–µ–Ω–∞\n');
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ devnet
        const connection = new Connection('https://api.devnet.solana.com', 'confirmed');
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
        const walletData = JSON.parse(fs.readFileSync('./wallets/keypair.json', 'utf8'));
        const payer = Keypair.fromSecretKey(new Uint8Array(walletData));
        
        console.log(`‚úÖ –ö–æ—à–µ–ª–µ–∫: ${payer.publicKey.toString().slice(0, 8)}...`);
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–∫–µ–Ω–∞
        const mintAddress = new PublicKey('HSu6v8PcmiGV7DrYEccQe8BwhnW7mZ5YWysQ6Sw2oZYv');
        const metadataUri = 'https://arweave.net/9AwRjcRpHNqPrxRcikz9KNg4Q5fHJxtkv5JVjiCikJBw';
        
        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        const TOKEN_METADATA_PROGRAM_ID = new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
        const [metadataAddress] = PublicKey.findProgramAddressSync(
            [
                Buffer.from('metadata'),
                TOKEN_METADATA_PROGRAM_ID.toBuffer(),
                mintAddress.toBuffer(),
            ],
            TOKEN_METADATA_PROGRAM_ID
        );
        
        console.log(`üìç Metadata Address: ${metadataAddress.toString()}`);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        const instruction = createCreateMetadataAccountV3Instruction(
            {
                metadata: metadataAddress,
                mint: mintAddress,
                mintAuthority: payer.publicKey,
                payer: payer.publicKey,
                updateAuthority: payer.publicKey,
            },
            {
                createMetadataAccountArgsV3: {
                    data: {
                        name: 'My Token Name',
                        symbol: 'MTN',
                        uri: metadataUri,
                        sellerFeeBasisPoints: 0,
                        creators: [
                            {
                                address: payer.publicKey,
                                verified: true,
                                share: 100,
                            },
                        ],
                        collection: null,
                        uses: null,
                    },
                    isMutable: true,
                    collectionDetails: null,
                },
            }
        );
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const transaction = new Transaction().add(instruction);
        const signature = await connection.sendTransaction(transaction, [payer]);
        
        console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${signature}`);
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
        
        await connection.confirmTransaction(signature);
        
        console.log('\nüéâ –£–°–ü–ï–•! –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!');
        console.log(`üîó Explorer: https://explorer.solana.com/address/${mintAddress.toString()}?cluster=devnet`);
        console.log(`üìú –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: https://explorer.solana.com/tx/${signature}?cluster=devnet`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        
        if (error.message.includes('already exists')) {
            console.error('üí° –¢–æ–∫–µ–Ω —É–∂–µ –∏–º–µ–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ');
            console.error('üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: https://explorer.solana.com/address/HSu6v8PcmiGV7DrYEccQe8BwhnW7mZ5YWysQ6Sw2oZYv?cluster=devnet');
        }
    }
}

createMetadata();
